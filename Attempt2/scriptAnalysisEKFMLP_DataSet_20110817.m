%% Batch analysis script
% Script for analyzing the data files generated by the batch simulation
% script

close all;

selectSubset = true;

%% Find the files
defaultDirectory = 'C:\Users\Phil\Documents\School\Masters\ECE 739 - Neural Networks\Project\EKF MLP\BatchSimulation_20110817_173848';
%directoryName = uigetdir(defaultDirectory,'Select the data file directory');
directoryName = defaultDirectory;

% Get the data files
allFiles = dir([directoryName filesep 'mlpekf_simulation*.mat']);

%% Load all the data files
% Allocate memory for all the data
allSimulations = cell(length(allFiles),1);
% Load each file
for i=1:length(allFiles)
%     simulations(i) = load([directoryName filesep allFiles(i).name]);
    temp = load([directoryName filesep allFiles(i).name]);
    allSimulations{i} = temp.simObj;
end

%% Select a subset of the simulations (optional)
if(selectSubset)
    % Create empty arrays
    simulations = {};
    files = struct(allFiles(1));
    for i=1:length(allSimulations)
        % Select files based on the following condition
        if(allSimulations{i}.r >= 500)
            curLen = length(simulations);
            simulations{curLen+1,1} = allSimulations{i};
            files(curLen+1) = allFiles(i);
        end
    end
    plotDirName = 'AnalysisPlots_R500';
end

%% Make a folder for the plots
% plotDir = [directoryName filesep plotDirName];
% if(exist(plotDir,'dir') ~= 7)
%     mkdir(plotDir);
% end

%% P_0 comparison
numValues = 4;
count = zeros(numValues,1);
avgPerf = zeros(simulations{1}.NumEpochs,numValues);

% Loop through data sets and sum 
for i=1:length(simulations)
    switch(simulations{i}.p)
        case 10
            index = 1;
            avgPerf(:,index) = avgPerf(:,index) + simulations{i}.Performance;
            count(index) = count(index) + 1;
        case 100
            index = 2;
            avgPerf(:,index) = avgPerf(:,index) + simulations{i}.Performance;
            count(index) = count(index) + 1;
        case 1000
            index = 3;
            avgPerf(:,index) = avgPerf(:,index) + simulations{i}.Performance;
            count(index) = count(index) + 1;
        case 10000
            index = 4;
            avgPerf(:,index) = avgPerf(:,index) + simulations{i}.Performance;
            count(index) = count(index) + 1;
        otherwise
            disp('Unknown p');
            disp(num2str(simulations{i}.p));
    end
end

% Take the average
for i=1:numValues
    avgPerf(:,i) = avgPerf(:,i)/count(i);
end

epochAxis = 1:1:simulations{1}.NumEpochs;
figure;
plot(epochAxis,100*(1-avgPerf));
legend(...
    '{\bfP_0} = 10{\bfI}',...
    '{\bfP_0} = 100{\bfI}',...
    '{\bfP_0} = 1000{\bfI}',...
    '{\bfP_0} = 10000{\bfI}',...
    'Location','Best');
ylim([0 60]);
title('Comparison of {\bfP_0} Values');
xlabel('Epochs');
ylabel('Error Rate (%)');

%% Select subset R >= 500 and P ~= 10000
%% Select a subset of the simulations (optional)
if(selectSubset)
    % Create empty arrays
    simulations = {};
    files = struct(allFiles(1));
    for i=1:length(allSimulations)
        % Select files based on the following condition
        if(allSimulations{i}.r >= 500 && allSimulations{i}.p ~= 10000)
            curLen = length(simulations);
            simulations{curLen+1,1} = allSimulations{i};
            files(curLen+1) = allFiles(i);
        end
    end
    plotDirName = 'AnalysisPlots_R500_PN10000';
end

%% Make a folder for the plots
% plotDir = [directoryName filesep plotDirName];
% if(exist(plotDir,'dir') ~= 7)
%     mkdir(plotDir);
% end

%% R_0 comparison
numValues = 3;
count = zeros(numValues,1);
avgPerf = zeros(simulations{1}.NumEpochs,numValues);

% Loop through data sets and sum 
for i=1:length(simulations)
    switch(simulations{i}.r)
        case 500
            index = 1;
            avgPerf(:,index) = avgPerf(:,index) + simulations{i}.Performance;
            count(index) = count(index) + 1;
        case 700
            index = 2;
            avgPerf(:,index) = avgPerf(:,index) + simulations{i}.Performance;
            count(index) = count(index) + 1;
        case 900
            index = 3;
            avgPerf(:,index) = avgPerf(:,index) + simulations{i}.Performance;
            count(index) = count(index) + 1;
        otherwise
            disp('Unknown r');
            disp(num2str(simulations{i}.r));
    end
end

% Take the average
for i=1:numValues
    avgPerf(:,i) = avgPerf(:,i)/count(i);
end

epochAxis = 1:1:simulations{1}.NumEpochs;
figure;
plot(epochAxis,100*(1-avgPerf));
legend(...
    '{\bfR_0} = 500{\bfI}',...
    '{\bfR_0} = 700{\bfI}',...
    '{\bfR_0} = 900{\bfI}',...
    'Location','Best');
ylim([0 60]);
title('Comparison of {\bfR_0} Values');
xlabel('Epochs');
ylabel('Error Rate (%)');

%% Q_0 comparison
numValues = 3;
count = zeros(numValues,1);
avgPerf = zeros(simulations{1}.NumEpochs,numValues);

% Loop through data sets and sum 
for i=1:length(simulations)
    switch(simulations{i}.q)
        case 0.1
            index = 1;
            avgPerf(:,index) = avgPerf(:,index) + simulations{i}.Performance;
            count(index) = count(index) + 1;
        case 0.01
            index = 2;
            avgPerf(:,index) = avgPerf(:,index) + simulations{i}.Performance;
            count(index) = count(index) + 1;
        case 0.001
            index = 3;
            avgPerf(:,index) = avgPerf(:,index) + simulations{i}.Performance;
            count(index) = count(index) + 1;
        otherwise
            disp('Unknown q');
            disp(num2str(simulations{i}.q));
    end
end

% Take the average
for i=1:numValues
    avgPerf(:,i) = avgPerf(:,i)/count(i);
end

epochAxis = 1:1:simulations{1}.NumEpochs;
figure;
plot(epochAxis,100*(1-avgPerf));
legend(...
    '{\bfQ_0} = 0.1{\bfI}',...
    '{\bfQ_0} = 0.01{\bfI}',...
    '{\bfQ_0} = 0.001{\bfI}',...
    'Location','Best');
ylim([0 60]);
title('Comparison of {\bfQ_0} Values');
xlabel('Epochs');
ylabel('Error Rate (%)');

%% Annealing comparison
numValues = 2;
count = zeros(numValues,1);
avgPerf = zeros(simulations{1}.NumEpochs,numValues);

% Loop through data sets and sum 
for i=1:length(simulations)
    switch(simulations{i}.DoAnnealing)
        case true
            index = 1;
            avgPerf(:,index) = avgPerf(:,index) + simulations{i}.Performance;
            count(index) = count(index) + 1;
        case false
            index = 2;
            avgPerf(:,index) = avgPerf(:,index) + simulations{i}.Performance;
            count(index) = count(index) + 1;
        otherwise
            disp('Unknown annealing');
            disp(num2str(simulations{i}.DoAnnealing));
    end
end

% Take the average
for i=1:numValues
    avgPerf(:,i) = avgPerf(:,i)/count(i);
end

epochAxis = 1:1:simulations{1}.NumEpochs;
figure;
plot(epochAxis,100*(1-avgPerf));
legend(...
    'Annealing',...
    'No Annealing',...
    'Location','Best');
ylim([0 60]);
title('Annealing Effects');
xlabel('Epochs');
ylabel('Error Rate (%)');

%% Redo Annealing comparison for each Q
qValues = [0.1 0.01 0.001];
for j=1:length(qValues)
    %% Select subset R >= 500 and P ~= 10000 Q = qValues(j)
    %% Select a subset of the simulations (optional)
    if(selectSubset)
        % Create empty arrays
        simulations = {};
        files = struct(allFiles(1));
        for i=1:length(allSimulations)
            % Select files based on the following condition
            if(allSimulations{i}.r >= 500 && allSimulations{i}.p ~= 10000 && allSimulations{i}.q == qValues(j))
                curLen = length(simulations);
                simulations{curLen+1,1} = allSimulations{i};
                files(curLen+1) = allFiles(i);
            end
        end
    end

    %% Annealing comparison
    numValues = 2;
    count = zeros(numValues,1);
    avgPerf = zeros(simulations{1}.NumEpochs,numValues);

    % Loop through data sets and sum 
    for i=1:length(simulations)
        switch(simulations{i}.DoAnnealing)
            case true
                index = 1;
                avgPerf(:,index) = avgPerf(:,index) + simulations{i}.Performance;
                count(index) = count(index) + 1;
            case false
                index = 2;
                avgPerf(:,index) = avgPerf(:,index) + simulations{i}.Performance;
                count(index) = count(index) + 1;
            otherwise
                disp('Unknown annealing');
                disp(num2str(simulations{i}.DoAnnealing));
        end
    end

    % Take the average
    for i=1:numValues
        avgPerf(:,i) = avgPerf(:,i)/count(i);
    end

    epochAxis = 1:1:simulations{1}.NumEpochs;
    figure;
    plot(epochAxis,100*(1-avgPerf));
    legend(...
        'Annealing',...
        'No Annealing',...
        'Location','Best');
    ylim([0 60]);
    title(['Annealing Effects for Q = ' num2str(qValues(j))]);
    xlabel('Epochs');
    ylabel('Error Rate (%)');
end
