%% Batch analysis script
% Script for analyzing the data files generated by the batch simulation
% script

selectSubset = true;
performancePlots = true;
exceptionPlot = false;
outputToCSV = true;

%% Find the files
% Ask the user for the data file directory
defaultDirectory = 'C:\Users\Phil\Documents\School\Masters\ECE 739 - Neural Networks\Project\EKF MLP\';
directoryName = uigetdir(defaultDirectory,'Select the data file directory');

% Get the data files
allFiles = dir([directoryName filesep 'mlpekf_simulation*.mat']);

%% Load all the data files
% Allocate memory for all the data
allSimulations = cell(length(allFiles),1);
% Load each file
for i=1:length(allFiles)
%     simulations(i) = load([directoryName filesep allFiles(i).name]);
    temp = load([directoryName filesep allFiles(i).name]);
    allSimulations{i} = temp.simObj;
end

%% Select a subset of the simulations (optional)
if(selectSubset)
    % Create empty arrays
    simulations = {};
    files = struct(allFiles(1));
    for i=1:length(allSimulations)
        % Select files based on the following condition
        if(allSimulations{i}.r >= 500 && allSimulations{i}.p == 10 && allSimulations{i}.q < 0.1)
            curLen = length(simulations);
            simulations{curLen+1,1} = allSimulations{i};
            files(curLen+1) = allFiles(i);
        end
    end
    plotDirName = 'PlotsP10_R500_Q01_001';
else
    % If we don't a subset just copy all the data
    simulations = allSimulations;
    files = allFiles;
    plotDirName = 'Plots';
end

%% Make a folder for the plots
plotDir = [directoryName filesep plotDirName];
if(exist(plotDir,'dir') ~= 7)
    mkdir(plotDir);
end


%% Plot a bar graph of exceptions
% Correlate simulation parameters with errors
% REMARK: Not generic
if(exceptionPlot)
errorDesiredOutputValue1 = 0;
errorDesiredOutputValue2 = 0;
errorDesiredOutputValue5 = 0;
errorDesiredOutputValue10 = 0;
errorQ1 = 0;
errorQ01 = 0;
errorQ001 = 0;
errorR1 = 0;
errorR10 = 0;
errorR100 = 0;
errorR200 = 0;
errorR500 = 0;
errorAnnealingTrue = 0;
errorAnnealingFalse = 0;
error43 = 0;
error103 = 0;
error206 = 0;
error10 = 0;
error20 = 0;
error30 = 0;
for i=1:length(simulations)
    if(~isempty(simulations{i}.Exception) && simulations{i}.r == 100)
        if(simulations{i}.DesiredOutputValue==1)
            errorDesiredOutputValue1 = errorDesiredOutputValue1 + 1;
        elseif(simulations{i}.DesiredOutputValue==2)
            errorDesiredOutputValue2 = errorDesiredOutputValue2 + 1;
        elseif(simulations{i}.DesiredOutputValue==5)
            errorDesiredOutputValue5 = errorDesiredOutputValue5 + 1;
        elseif(simulations{i}.DesiredOutputValue==10)
            errorDesiredOutputValue10 = errorDesiredOutputValue10 + 1;
        end
        
        if(simulations{i}.q==0.1)
            errorQ1 = errorQ1 + 1;
        elseif(simulations{i}.q==0.01)
            errorQ01 = errorQ01 + 1;
        elseif(simulations{i}.q==0.001)
            errorQ001 = errorQ001 + 1;
        end
        
        if(simulations{i}.r==1)
            errorR1 = errorR1 + 1;
        elseif(simulations{i}.r==10)
            errorR10 = errorR10 + 1;
        elseif(simulations{i}.r==100)
            errorR100 = errorR100 + 1;
        elseif(simulations{i}.r==200)
            errorR200 = errorR200 + 1;
        elseif(simulations{i}.r==500)
            errorR500 = errorR500 + 1;
        end
        
        if(simulations{i}.DoAnnealing==true)
            errorAnnealingTrue = errorAnnealingTrue + 1;
        elseif(simulations{i}.DoAnnealing==false)
            errorAnnealingFalse = errorAnnealingFalse + 1;
        end
        
        if(simulations{i}.MLPConfigObj.NumHiddenNodes==[4 3])
            error43 = error43 + 1;
        elseif(simulations{i}.MLPConfigObj.NumHiddenNodes==[10 3])
            error103 = error103 + 1;
        elseif(simulations{i}.MLPConfigObj.NumHiddenNodes==[20 6])
            error206 = error206 + 1;
        elseif(simulations{i}.MLPConfigObj.NumHiddenNodes==[10])
            error10 = error10 + 1;
        elseif(simulations{i}.MLPConfigObj.NumHiddenNodes==[20])
            error20 = error20 + 1;
        elseif(simulations{i}.MLPConfigObj.NumHiddenNodes==[30])
            error30 = error30 + 1;
        end
    end
end
end
% disp('The following simulations had errors');
% count = 0;
% for i=1:length(simulations)
%     if(~isempty(simulations{i}.Exception))
%         disp(['Simulation: ' files(i).name]);
%         disp(['  DesiredOutputValue: '...
%             num2str(simulations{i}.DesiredOutputValue)]);
%         disp(['  p: '...
%             num2str(simulations{i}.p)]);
%         disp(['  q: '...
%             num2str(simulations{i}.q)]);
%         disp(['  r: '...
%             num2str(simulations{i}.r)]);
%         disp(['  NumHiddenLayers: '...
%             num2str(simulations{i}.MLPConfigObj.NumHiddenLayers)]);
%         disp(['  NumHiddenNodes: '...
%             num2str(simulations{i}.MLPConfigObj.NumHiddenNodes)]);
%         count = count + 1;
%     end
% end

%% Calculate the final average performance
tail = 20;
finalAvg = zeros(length(simulations),1);
for i=1:length(simulations)
    finalAvg(i) = sum(simulations{i}.Performance(end-tail+1:end))/tail;
end

%% Plot the performance
if(performancePlots)
    h = figure;
    for i=1:length(simulations)
        plot(simulations{i}.Performance);
        info = ['HN: ' num2str(simulations{i}.MLPConfigObj.NumHiddenNodes)...
            ' DO: ' num2str(simulations{i}.DesiredOutputValue)...
            ' p: ' num2str(simulations{i}.p)...
            ' r: ' num2str(simulations{i}.r)...
            ' q: ' num2str(simulations{i}.q)...
            ' Annealing: ' num2str(simulations{i}.DoAnnealing)...
            ' Final Avg Perf: ' num2str(finalAvg(i),'%4.2f')];
        title({'Performance vs. Epochs',info});
        xlabel('Epochs');
        ylabel('Performance');
        ylim([0 1]);
        saveas(h,[plotDir filesep files(i).name '_Performance' '.png']);
        saveas(h,[plotDir filesep files(i).name '_Performance' '.fig']);
    end
    close(h);
end

%% Output to csv
if(outputToCSV)
    csvFileID = fopen([plotDir filesep 'data.csv'],'w+');
    fprintf(csvFileID,...
        'File Name, Hidden Nodes, Desired Output, p, r, q, Annealing, Exception, Final Average Performance\n');
    for i=1:length(simulations)
        fprintf(csvFileID,'%s,%s,%s,%s,%s,%s,%s,%s,%s\n',...
            files(i).name,...
            num2str(simulations{i}.MLPConfigObj.NumHiddenNodes),...
            num2str(simulations{i}.DesiredOutputValue),...
            num2str(simulations{i}.p),...
            num2str(simulations{i}.r),...
            num2str(simulations{i}.q),...
            num2str(simulations{i}.DoAnnealing),...
            num2str(~isempty(simulations{i}.Exception)),...
            num2str(finalAvg(i),'%4.2f'));
    end
    fclose(csvFileID);
end